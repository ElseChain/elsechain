To ensure that transaction pools are synchronized across users, add the transaction pool to the peer to peer server. In p2p-server.js:
```
constructor(blockchain, transactionPool) {
this.transactionPool = transactionPool;
}
```

Now make sure to pass the tp object to the p2pServer that we create in the main app/index.js file:
```
const p2pServer = new P2pServer(bc, tp);
```

Next, back in the p2p-server.js file, add a `sendTransaction` and `broadcastTransaction` method to broadcast transactions to all connected peers:
````
sendTransaction(socket, transaction) {
socket.send(JSON.stringify(transaction));
}

broadcastTransaction(transaction) {
  	this.sockets.forEach(socket => this.sendTransaction(socket, transaction));
}
```

However, this necessitates updating the way messages are handled. The messages should be sent with different types so that the message handler can respond accordingly. At the top of the p2p-server.js file:
```
const MESSAGE_TYPES = {
 chain: 'CHAINâ€™,
 transaction: 'TRANSACTION'
};
```

Now update the sending methods:
```
 sendChain(socket) {
   socket.send(JSON.stringify({ type: MESSAGE_TYPES.chain, chain: this.blockchain.chain }));
 }

 sendTransaction(socket, transaction) {
   socket.send(JSON.stringify({ type: MESSAGE_TYPES.transaction, transaction }));
 }
```